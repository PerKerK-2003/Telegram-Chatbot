const {
  insertFAQ,
  getRootMessage,
  getHistoryConversation,
  getLatestAnswer,
} = require("../services/faqs_service");
const { askGemini, extractQAFromTextWithRetry } = require("../utils/gemini");
const handleImageMessage = require("./handleImage");
const {
  saveTextEmbedding,
  findSimilarEmbeddings,
} = require("../embedding/textEmbedding");

const { insertSupportMessageToSheet } = require("../sheet/googleSheet");

const greetings = ["hello", "xin ch√†o"];

async function handleMessage(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const messageId = msg.message_id;
  let rootMessage;

  bot.sendChatAction(chatId, "typing");

  if (msg.photo) {
    await handleImageMessage(bot, msg, chatId);
    return;
  }

  const question = msg.text;
  if (!question || question.trim().length === 0) {
    bot.sendMessage(
      chatId,
      "Xin vui l√≤ng g·ª≠i m·ªôt c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
    );
    return;
  }

  if (greetings.some((greet) => question.toLowerCase().includes(greet))) {
    bot.sendMessage(
      chatId,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    return;
  }

  try {
    console.log("C√¢u h·ªèi:", question);
    const userIntent = await extractQAFromTextWithRetry(question);
    console.log("√ù ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng:", userIntent);

    if (userIntent.type === "teach") {
      console.log(
        "Ng∆∞·ªùi d√πng ƒëang d·∫°y bot:",
        userIntent.question,
        "->",
        userIntent.answer
      );

      await insertFAQ(
        userIntent.question,
        userIntent.answer,
        messageId,
        chatId,
        userId
      );
      rootMessage = await getRootMessage(messageId, chatId, userId);

      await saveTextEmbedding(
        messageId,
        userId,
        chatId,
        userIntent.question,
        userIntent.answer,
        rootMessage ? rootMessage : ""
      );

      await insertSupportMessageToSheet(
        userIntent.question,
        userIntent.answer,
        messageId,
        userId,
        chatId,
        new Date().toISOString(),
        "",
        rootMessage ? rootMessage : ""
      );

      return bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ h·ªçc ƒë∆∞·ª£c th√¥ng tin m·ªõi!\n\nüß† **C√¢u h·ªèi:** ${userIntent.question}\nüí° **Tr·∫£ l·ªùi:** ${userIntent.answer}\n\nT√¥i s·∫Ω nh·ªõ ƒëi·ªÅu n√†y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi t∆∞∆°ng t·ª± sau.`
      );
    }

    const conversationHistory = await getHistoryConversation(chatId, userId);

    const relevantFAQs = await findSimilarEmbeddings(question, 3);

    console.log("Th√¥ng tin li√™n quan:", relevantFAQs.length);
    console.log("Relevant FAQs:", relevantFAQs);
    const latestAnswer = await getLatestAnswer(userId, chatId);

    let enhancedPrompt = `D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán n·∫øu c√≥: 
    ${conversationHistory
      .map((msg) => `- Ng∆∞·ªùi d√πng: ${msg.question}\n  Bot: ${msg.answer}`)
      .join("\n")};
    Ph·∫£n h·ªìi g·∫ßn nh·∫•t c·ªßa bot: ${
      latestAnswer ? latestAnswer.answer : "Kh√¥ng c√≥ ph·∫£n h·ªìi n√†o."
    }
    H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
    - N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, h√£y y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin
    - C·ªë g·∫Øng cung c·∫•p c√¢u tr·∫£ l·ªùi chi ti·∫øt v√† ƒë·ªÅ xu·∫•t c√°c h∆∞·ªõng gi·∫£i quy·∫øt
    - S·ª≠ d·ª•ng l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh t·ªët h∆°n
    - N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi
    - Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt
    `;
    console.log("Enhanced prompt:", enhancedPrompt);

    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];
      if (mostRelevantFAQ.score > 0.99) {
        console.log("ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng g·∫ßn nh·∫•t:", mostRelevantFAQ.score);

        await insertSupportMessageToSheet(
          question,
          mostRelevantFAQ.answer,
          messageId,
          chatId,
          userId,
          new Date().toISOString(),
          "",
          rootMessage ? rootMessage : ""
        );

        const response = mostRelevantFAQ.answer;

        bot.sendMessage(chatId, response, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
                {
                  text: "üëé Kh√¥ng h·ªØu √≠ch",
                  callback_data: "feedback_not_helpful",
                },
              ],
            ],
          },
        });
        return;
      }
    }
    const response = await askGemini(enhancedPrompt, question);
    await insertFAQ(question, response, messageId, chatId, userId);
    rootMessage = await getRootMessage(messageId, chatId, userId);
    await saveTextEmbedding(
      messageId,
      userId,
      chatId,
      question,
      response,
      rootMessage ? rootMessage : ""
    );
    await insertSupportMessageToSheet(
      question,
      response,
      messageId,
      chatId,
      userId,
      new Date().toISOString(),
      "",
      rootMessage ? rootMessage : ""
    );
    bot.sendMessage(chatId, response, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
            {
              text: "üëé Kh√¥ng h·ªØu √≠ch",
              callback_data: "feedback_not_helpful",
            },
          ],
        ],
      },
    });
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn:", err);
    bot.sendMessage(
      chatId,
      "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£."
    );
  }
}

module.exports = handleMessage;
