const { insertFAQ } = require("../services/faqs_service");
const { askGemini, extractQAFromTextWithRetry } = require("../utils/gemini");
const ConversationHistory = require("../utils/conversation");
const handleImageMessage = require("./handleImage");
const {
  saveTextEmbedding,
  findSimilarEmbeddings,
} = require("../embedding/textEmbedding");

const { insertSupportMessageToSheet } = require("../sheet/googleSheet");

const greetings = ["hello", "xin ch√†o"];
const conversationHistory = new ConversationHistory();

async function handleMessage(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  bot.sendChatAction(chatId, "typing");

  if (msg.photo) {
    await handleImageMessage(bot, msg, chatId);
    return;
  }

  const question = msg.text;
  if (!question || question.trim().length === 0) {
    bot.sendMessage(
      chatId,
      "Xin vui l√≤ng g·ª≠i m·ªôt c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
    );
    return;
  }

  if (greetings.some((greet) => question.toLowerCase().includes(greet))) {
    bot.sendMessage(
      chatId,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    conversationHistory.addMessage(
      userId,
      chatId,
      question,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    return;
  }

  try {
    console.log("Analyzing user intent for:", question);
    const userIntent = await extractQAFromTextWithRetry(question);
    console.log("User intent detected:", userIntent);

    if (userIntent.type === "teach") {
      console.log(
        "User is teaching bot:",
        userIntent.question,
        "->",
        userIntent.answer
      );

      await insertFAQ(
        userIntent.question,
        userIntent.answer,
        msg.message_id,
        msg.from.id,
        msg.chat.id
      );

      await saveTextEmbedding(
        msg.from.id,
        chatId,
        userIntent.question,
        userIntent.answer
      );

      await insertSupportMessageToSheet(
        userIntent.question,
        userIntent.answer,
        msg.message_id,
        msg.from.id,
        msg.chat.id,
        new Date().toISOString()
      );

      conversationHistory.addMessage(
        userId,
        chatId,
        question,
        userIntent.answer
      );

      return bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ h·ªçc ƒë∆∞·ª£c th√¥ng tin m·ªõi!\n\nüß† **C√¢u h·ªèi:** ${userIntent.question}\nüí° **Tr·∫£ l·ªùi:** ${userIntent.answer}\n\nT√¥i s·∫Ω nh·ªõ ƒëi·ªÅu n√†y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi t∆∞∆°ng t·ª± sau.`
      );
    }

    const followUpContext = conversationHistory.getFollowUpContext(
      userId,
      chatId
    );
    const conversationContext = conversationHistory.formatForGemini(
      userId,
      chatId
    );

    let relevantFAQs;
    let searchQuery = question;

    if (followUpContext && followUpContext.isFollowUp) {
      const contextualQuery = `${followUpContext.question} ${question}`;
      relevantFAQs = await findSimilarEmbeddings(contextualQuery, 3);

      const currentRelevantFAQs = await findSimilarEmbeddings(question, 2);
      const combinedFAQs = [...relevantFAQs, ...currentRelevantFAQs];
      const uniqueFAQs = combinedFAQs.filter(
        (faq, index, self) =>
          index === self.findIndex((f) => f.question === faq.question)
      );
      relevantFAQs = uniqueFAQs.slice(0, 3);
      searchQuery = contextualQuery;
    } else {
      relevantFAQs = await findSimilarEmbeddings(question, 3);
    }

    console.log("Relevant FAQs found:", relevantFAQs.length);
    console.log("Follow-up context:", followUpContext);

    let enhancedPrompt = `D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y n·∫øu c√≥: 
    ${conversationContext}`;

    if (followUpContext && followUpContext.isFollowUp) {
      enhancedPrompt += `
[QUAN TR·ªåNG] ƒê√¢y l√† c√¢u h·ªèi ti·∫øp theo s·ªë ${followUpContext.followUpCount} v·ªÅ ch·ªß ƒë·ªÅ "${followUpContext.lastTopic}".
${followUpContext.contextualPrompt}`;
    } else {
      enhancedPrompt += `
H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, h√£y y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin
- C·ªë g·∫Øng cung c·∫•p c√¢u tr·∫£ l·ªùi chi ti·∫øt v√† ƒë·ªÅ xu·∫•t c√°c h∆∞·ªõng gi·∫£i quy·∫øt
- S·ª≠ d·ª•ng l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh t·ªët h∆°n
- N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi
- Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt
`;
    }

    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];
      const similarityThreshold = followUpContext?.isFollowUp ? 0.95 : 0.98;

      if (mostRelevantFAQ.score > similarityThreshold) {
        console.log(
          "Using direct FAQ match with score:",
          mostRelevantFAQ.score
        );

        await insertFAQ(
          question,
          mostRelevantFAQ.answer,
          msg.message_id,
          msg.chat.id,
          msg.from.id
        );
        await insertSupportMessageToSheet(
          question,
          mostRelevantFAQ.answer,
          msg.message_id,
          msg.chat.id,
          msg.from.id,
          new Date().toISOString()
        );

        let response = mostRelevantFAQ.answer;
        if (followUpContext?.isFollowUp) {
          response = `[Ti·∫øp theo c√¢u h·ªèi tr∆∞·ªõc] ${response}`;
        }

        bot.sendMessage(chatId, response, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
                {
                  text: "üëé Kh√¥ng h·ªØu √≠ch",
                  callback_data: "feedback_not_helpful",
                },
              ],
            ],
          },
        });

        conversationHistory.addMessage(userId, chatId, question, response);
        return;
      }
    }

    console.log("Generating AI response...");
    const response = await askGemini(enhancedPrompt, question);

    await saveTextEmbedding(msg.from.id, chatId, question, response);
    await insertFAQ(
      question,
      response,
      msg.message_id,
      msg.chat.id,
      msg.from.id
    );
    await insertSupportMessageToSheet(
      question,
      response,
      msg.message_id,
      msg.chat.id,
      msg.from.id,
      new Date().toISOString()
    );

    let finalResponse = response;
    if (followUpContext?.isFollowUp) {
      finalResponse = `üí¨ ${response}`;
    }

    bot.sendMessage(chatId, finalResponse, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
            {
              text: "üëé Kh√¥ng h·ªØu √≠ch",
              callback_data: "feedback_not_helpful",
            },
          ],
        ],
      },
    });

    conversationHistory.addMessage(userId, chatId, question, response);
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn:", err);
    bot.sendMessage(
      chatId,
      "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£."
    );
  }
}

module.exports = handleMessage;
