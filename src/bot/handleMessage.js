const {
  insertFAQ,
  expireOldSessions,
  getHistoryConversation,
  getLatestAnswer,
  getHelpfulResponses,
  continueSession,
} = require("../services/faqs_service");
const { askGemini } = require("../utils/gemini");
const handleImageMessage = require("./handleImage");
const {
  saveTextEmbedding,
  findSimilarEmbeddings,
} = require("../embedding/textEmbedding");

const { insertSupportMessageToSheet } = require("../sheet/googleSheet");

const greetings = ["hello", "xin ch√†o"];

async function handleMessage(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const messageId = msg.message_id;
  await expireOldSessions(userId, chatId);
  console.log("Received message:", messageId);
  let rootMessage;

  bot.sendChatAction(chatId, "typing");

  if (msg.photo) {
    await handleImageMessage(bot, msg, chatId);
    return;
  }

  const question = msg.text;
  if (!question || question.trim().length === 0) {
    bot.sendMessage(
      chatId,
      "Xin vui l√≤ng g·ª≠i m·ªôt c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
    );
    return;
  }

  if (greetings.some((greet) => question.toLowerCase().includes(greet))) {
    bot.sendMessage(
      chatId,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    return;
  }

  try {
    console.log("C√¢u h·ªèi:", question);

    const conversationHistory = await getHistoryConversation(chatId, userId);

    const relevantFAQs = await findSimilarEmbeddings(question, 3);

    console.log("Th√¥ng tin li√™n quan:", relevantFAQs.length);
    console.log("Relevant FAQs:", relevantFAQs);
    const latestAnswer = await getLatestAnswer(userId, chatId);

    let enhancedPrompt = `D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán n·∫øu c√≥: 
    ${conversationHistory
      .map((msg) => `- Ng∆∞·ªùi d√πng: ${msg.question}\n  Bot: ${msg.answer}`)
      .join("\n")};
    Ph·∫£n h·ªìi g·∫ßn nh·∫•t c·ªßa bot: ${
      latestAnswer ? latestAnswer.text : "Kh√¥ng c√≥ ph·∫£n h·ªìi n√†o."
    }
    H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
    - N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, h√£y y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin
    - C·ªë g·∫Øng cung c·∫•p c√¢u tr·∫£ l·ªùi chi ti·∫øt v√† ƒë·ªÅ xu·∫•t c√°c h∆∞·ªõng gi·∫£i quy·∫øt c≈©ng nh∆∞ nguy√™n nh√¢n g√¢y ra v·∫•n ƒë·ªÅ
    - S·ª≠ d·ª•ng l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh t·ªët h∆°n
    - N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi
    - Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu ho·∫∑c khi c·∫ßn thi·∫øt
    `;
    //   H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
    // - Cung c·∫•p m·ªôt s·ªë nguy√™n nh√¢n ph·ªï bi·∫øn ho·∫∑c gi·∫£i ph√°p cho c√¢u h·ªèi
    // - Tham kh·∫£o l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n
    // - N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi
    // - N·∫øu c√≥ c√¢u h·ªèi t∆∞∆°ng t·ª± ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi, h√£y s·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi ƒë√≥
    // - N·∫øu c·∫ßn thi·∫øt, h√£y y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin
    // `;
    console.log("Enhanced prompt:", enhancedPrompt);
    const response = await askGemini(enhancedPrompt, question);
    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];
      if (mostRelevantFAQ.score > 0.99) {
        console.log("ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng g·∫ßn nh·∫•t:", mostRelevantFAQ.score);
        console.log("Relevant FAQ found:", mostRelevantFAQ.rootMessage, chatId);
        if (mostRelevantFAQ.supportStatus === false) {
          await continueSession(chatId, userId);
          const sentMessage = await bot.sendMessage(chatId, response, {
            reply_to_message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üëç Gi√∫p √≠ch",
                    callback_data: `feedback_helpful_${messageId}`,
                  },
                  {
                    text: "üëé Kh√¥ng h·ªØu √≠ch",
                    callback_data: `feedback_not_helpful_${messageId}`,
                  },
                ],
              ],
            },
          });
          await insertFAQ(
            question,
            response,
            messageId,
            sentMessage.message_id,
            chatId,
            userId
          );
          await insertSupportMessageToSheet(
            question,
            mostRelevantFAQ.answer,
            messageId,
            chatId,
            userId,
            new Date().toISOString(),
            "",
            mostRelevantFAQ.rootMessage
          );
          await saveTextEmbedding(
            messageId,
            userId,
            chatId,
            question,
            response,
            "",
            rootMessage
          );
          return;
        } else {
          const helpfulResponse = await getHelpfulResponses(
            mostRelevantFAQ.rootMessage,
            chatId
          );
          await insertSupportMessageToSheet(
            question,
            helpfulResponse ? helpfulResponse.text : mostRelevantFAQ.answer,
            messageId,
            chatId,
            userId,
            new Date().toISOString(),
            "",
            mostRelevantFAQ.rootMessage
          );

          console.log("Response from FAQ:", helpfulResponse);
          bot.sendMessage(
            chatId,
            helpfulResponse ? helpfulResponse.text : mostRelevantFAQ.answer,
            {
              reply_to_message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üëç Gi√∫p √≠ch",
                      callback_data: `feedback_helpful_${messageId}`,
                    },
                    {
                      text: "üëé Kh√¥ng h·ªØu √≠ch",
                      callback_data: `feedback_not_helpful_${messageId}`,
                    },
                  ],
                ],
              },
            }
          );
          return;
        }
      }
    }
    const sentMessage = await bot.sendMessage(chatId, response, {
      reply_to_message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëç Gi√∫p √≠ch",
              callback_data: `feedback_helpful_${messageId}`,
            },
            {
              text: "üëé Kh√¥ng h·ªØu √≠ch",
              callback_data: `feedback_not_helpful_${messageId}`,
            },
          ],
        ],
      },
    });
    rootMessage = await insertFAQ(
      question,
      response,
      messageId,
      sentMessage.message_id,
      chatId,
      userId
    );
    await saveTextEmbedding(
      messageId,
      userId,
      chatId,
      question,
      response,
      "",
      rootMessage
    );
    await insertSupportMessageToSheet(
      question,
      response,
      messageId,
      chatId,
      userId,
      new Date().toISOString(),
      "",
      rootMessage
    );
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn:", err);
    bot.sendMessage(
      chatId,
      "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£."
    );
  }
}

module.exports = handleMessage;
