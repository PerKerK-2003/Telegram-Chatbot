const {
  askGemini,
  askGeminiWithImage,
  extractQAFromText,
} = require("../utils/gemini");
const { getFAQs, addOrUpdateFAQ } = require("../services/faqs_service");
const { logUniqueQuestion } = require("../services/logQuestion_service");
const stopwords = require("stopwords-vi");

const conversationHistory = new Map();

const MAX_HISTORY_LENGTH = 10;

const greetings = ["hello", "xin ch√†o"];

function extractBoldAnswer(response) {
  const match = response.match(/\*\*(.*?)\*\*/);
  return match ? match[1].trim() : response.trim();
}

function normalize(str) {
  return str
    .toLowerCase()
    .split(/\s+/)
    .filter((word) => word.length > 2 && !stopwords.includes(word))
    .join(" ");
}

function calculateSimilarity(str1, str2) {
  const set1 = new Set(normalize(str1).split(/\s+/));
  const set2 = new Set(normalize(str2).split(/\s+/));

  const intersection = new Set([...set1].filter((x) => set2.has(x)));

  const similarity =
    intersection.size / (set1.size + set2.size - intersection.size);
  return similarity;
}

function findRelevantFAQs(faqs, question) {
  const scoredFAQs = faqs.map((faq) => {
    const similarityScore = calculateSimilarity(question, faq.message);
    return { ...faq, similarityScore };
  });

  return scoredFAQs
    .sort((a, b) => b.similarityScore - a.similarityScore)
    .filter((faq) => faq.similarityScore > 0.1)
    .slice(0, 5);
}

function formatContext(faqs) {
  let context = "D∆∞·ªõi ƒë√¢y l√† th√¥ng tin h·ªó tr·ª£ li√™n quan nh·∫•t n·∫øu c√≥:\n\n";

  faqs.forEach((faq, index) => {
    context += `${index + 1}. C√¢u h·ªèi: ${faq.message}\n   Tr·∫£ l·ªùi: ${
      faq.answer
    }\n\n`;
  });

  context +=
    "H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin tr√™n. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp. N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi.";

  return context;
}

function getConversationHistory(chatId) {
  if (!conversationHistory.has(chatId)) {
    conversationHistory.set(chatId, []);
  }
  return conversationHistory.get(chatId);
}

function addToConversationHistory(chatId, userMessage, botResponse) {
  const history = getConversationHistory(chatId);

  history.push({
    user: userMessage,
    bot: botResponse,
    timestamp: new Date().toISOString(),
  });

  if (history.length > MAX_HISTORY_LENGTH) {
    history.shift();
  }

  conversationHistory.set(chatId, history);
}

function formatConversationHistory(history) {
  if (!history || history.length === 0) return "";
  return history
    .map((turn, i) => `Ng∆∞·ªùi d√πng: ${turn.user}\nBot: ${turn.bot}`)
    .join("\n");
}

async function handleImageMessage(bot, msg, chatId) {
  const photoArray = msg.photo;
  const highestQualityPhoto = photoArray[photoArray.length - 1];
  const fileId = highestQualityPhoto.file_id;

  try {
    const fileLink = await bot.getFileLink(fileId);
    bot.sendMessage(
      chatId,
      "C·∫£m ∆°n! T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ·∫£nh c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω..."
    );

    const faqs = await getFAQs();
    const prompt =
      msg.caption ||
      "H√£y m√¥ t·∫£ n·ªôi dung trong h√¨nh ·∫£nh n√†y v√† cung c·∫•p th√¥ng tin h·ªó tr·ª£ n·∫øu li√™n quan.";

    const history = getConversationHistory(chatId);
    const conversationContext = formatConversationHistory(history);

    const contextPrompt = formatContext(faqs) + conversationContext + prompt;

    const qa = await extractQAFromText(contextPrompt);
    console.log("QA:", qa);

    if (qa) {
      await addOrUpdateFAQ(qa.question, qa.answer);
      return bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ ghi nh·ªõ:\nüß† C√¢u h·ªèi: ${qa.question}\nüí° Tr·∫£ l·ªùi: ${qa.answer}`
      );
    }

    const geminiResponse = await askGeminiWithImage(fileLink, contextPrompt);
    const conciseAnswer = extractBoldAnswer(geminiResponse);

    addToConversationHistory(chatId, contextPrompt, conciseAnswer);

    await addOrUpdateFAQ(contextPrompt, conciseAnswer);
    bot.sendMessage(chatId, geminiResponse, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
            { text: "üëé Kh√¥ng h·ªØu √≠ch", callback_data: "feedback_not_helpful" },
          ],
        ],
      },
    });
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh:", err);
    bot.sendMessage(
      chatId,
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
    );
  }
}

async function handleMessage(bot, msg) {
  const chatId = msg.chat.id;

  bot.sendChatAction(chatId, "typing");

  if (msg.photo) {
    await handleImageMessage(bot, msg, chatId);
    return;
  }

  const question = msg.text;
  if (!question || question.trim().length === 0) {
    bot.sendMessage(
      chatId,
      "Xin vui l√≤ng g·ª≠i m·ªôt c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
    );
    return;
  }

  if (greetings.some((greet) => question.toLowerCase().includes(greet))) {
    bot.sendMessage(
      chatId,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    addToConversationHistory(
      chatId,
      question,
      "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?"
    );
    return;
  }

  try {
    const history = getConversationHistory(chatId);
    const conversationContext = formatConversationHistory(history);

    const faqs = await getFAQs();

    const relevantFAQs = findRelevantFAQs(faqs, question);
    console.log("Relevant FAQs:", relevantFAQs);

    let faqContext = formatContext(relevantFAQs);

    const qa = await extractQAFromText(question);
    console.log("QA:", qa);

    if (qa) {
      await addOrUpdateFAQ(qa.question, qa.answer);
      return bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ ghi nh·ªõ:\nüß† C√¢u h·ªèi: ${qa.question}\nüí° Tr·∫£ l·ªùi: ${qa.answer}`
      );
    }

    const enhancedPrompt = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω AI. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y n·∫øu c√≥:
      ${conversationContext}
      ${faqContext}

      C√¢u h·ªèi: "${question.trim()}"
      H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† c·ªë g·∫Øng cung c·∫•p c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch.
      `;
    console.log("Enhanced Prompt:", enhancedPrompt);
    const response = await askGemini(enhancedPrompt, question);
    const conciseAnswer = extractBoldAnswer(response);

    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];
      const similarityScore = calculateSimilarity(
        question,
        mostRelevantFAQ.message
      );

      if (similarityScore > 0.7) {
        console.log(
          "Question: ",
          mostRelevantFAQ.message + " | Answer: ",
          mostRelevantFAQ.answer
        );
        addToConversationHistory(chatId, question, mostRelevantFAQ.answer);
        addOrUpdateFAQ(mostRelevantFAQ.message, mostRelevantFAQ.answer);
      } else {
        addToConversationHistory(chatId, question, conciseAnswer);
        await addOrUpdateFAQ(question, conciseAnswer);
      }
    }

    bot.sendMessage(chatId, response, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
            { text: "üëé Kh√¥ng h·ªØu √≠ch", callback_data: "feedback_not_helpful" },
          ],
        ],
      },
    });
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn:", err);
    bot.sendMessage(
      chatId,
      "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£."
    );
  }
}

function clearConversationHistory(chatId) {
  conversationHistory.delete(chatId);
  return "L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a.";
}

function handleCommand(bot, msg) {
  const chatId = msg.chat.id;
  const command = msg.text;

  if (command === "/clear_history") {
    const response = clearConversationHistory(chatId);
    bot.sendMessage(chatId, response);
    return true;
  }

  return false;
}

async function handleMessageOrCommand(bot, msg) {
  if (msg.text && msg.text.startsWith("/")) {
    const handled = handleCommand(bot, msg);
    if (handled) return;
  }

  await handleMessage(bot, msg);
}

module.exports = handleMessageOrCommand;
