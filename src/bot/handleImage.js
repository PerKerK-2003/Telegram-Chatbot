const {
  insertFAQ,
  getHistoryConversation,
  getRootMessage,
} = require("../services/faqs_service");
const { askGeminiWithImage } = require("../utils/gemini");
const {
  saveTextEmbedding,
  findSimilarEmbeddings,
} = require("../embedding/textEmbedding");
const { insertSupportMessageToSheet } = require("../sheet/googleSheet");

async function handleImageMessage(bot, msg, chatId) {
  const photoArray = msg.photo;
  const highestQualityPhoto = photoArray[photoArray.length - 1];
  const fileId = highestQualityPhoto.file_id;
  const userId = msg.from.id;
  const messageId = msg.message_id;
  let rootMessage;

  try {
    const fileLink = await bot.getFileLink(fileId);
    const prompt = msg.caption || "ƒê√¢y l√† h√¨nh ·∫£nh li√™n quan";

    console.log("C√¢u h·ªèi:", prompt);

    const conversationHistory = await getHistoryConversation(chatId, userId);

    const relevantFAQs = await findSimilarEmbeddings(prompt, 3);

    let contextPrompt = `D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y n·∫øu c√≥: 
    ${conversationHistory
      .map((msg) => `- Ng∆∞·ªùi d√πng: ${msg.question}\n  Bot: ${msg.answer}`)
      .join("\n")};
    H∆∞·ªõng d·∫´n ph√¢n t√≠ch h√¨nh ·∫£nh:
    - S·ª≠ d·ª•ng l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh t·ªët h∆°n
    - Tr·∫£ l·ªùi d·ª±a tr√™n nh·ªØng th√¥ng tin b·∫°n th·∫•y trong h√¨nh ·∫£nh
    - Cung c·∫•p c√°c nguy√™n nh√¢n c√≥ th·ªÉ g√¢y ra v·∫•n ƒë·ªÅ v√† ƒë·ªÅ xu·∫•t c√°c h∆∞·ªõng gi·∫£i quy·∫øt
    - N·∫øu h√¨nh ·∫£nh kh√¥ng r√µ r√†ng, h√£y tham kh·∫£o ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ ƒë·ªÉ hi·ªÉu √Ω ƒë·ªãnh
    - N·∫øu ƒë√£ ƒë·∫ßy ƒë·ªß th√¥ng tin th√¨ tr·∫£ l·ªùi ƒë√£ ti·∫øp nh·∫≠n c√¢u h·ªèi v√† s·∫Ω chuy·ªÉn ƒë·∫øn b·ªô ph·∫≠n h·ªó tr·ª£
    C√¢u h·ªèi/M√¥ t·∫£: ${prompt}`;
    console.log("Prompt:", contextPrompt);

    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];

      if (mostRelevantFAQ.score > 0.99) {
        console.log("ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng g·∫ßn nh·∫•t:", mostRelevantFAQ.score);

        const response = mostRelevantFAQ.answer;
        bot.sendMessage(chatId, response, {
          reply_to_message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üëç Gi√∫p √≠ch",
                  callback_data: `feedback_helpful_${messageId}`,
                },
                {
                  text: "üëé Kh√¥ng h·ªØu √≠ch",
                  callback_data: `feedback_not_helpful_${messageId}`,
                },
              ],
            ],
          },
        });
        await insertSupportMessageToSheet(
          prompt,
          response,
          messageId,
          chatId,
          userId,
          new Date().toISOString(),
          fileId,
          rootMessage ? rootMessage : ""
        );
        return;
      }
    }

    const geminiResponse = await askGeminiWithImage(fileLink, contextPrompt);
    const sentMessage = await bot.sendMessage(chatId, geminiResponse, {
      reply_to_message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëç Gi√∫p √≠ch",
              callback_data: `feedback_helpful_${messageId}`,
            },
            {
              text: "üëé Kh√¥ng h·ªØu √≠ch",
              callback_data: `feedback_not_helpful_${messageId}`,
            },
          ],
        ],
      },
    });
    await saveTextEmbedding(
      messageId,
      userId,
      chatId,
      prompt,
      geminiResponse,
      fileId,
      rootMessage ? rootMessage : ""
    );
    await insertFAQ(
      prompt,
      geminiResponse,
      messageId,
      sentMessage.message_id,
      chatId,
      userId,
      fileId
    );
    rootMessage = await getRootMessage(messageId, chatId, userId);
    await insertSupportMessageToSheet(
      prompt,
      geminiResponse,
      messageId,
      chatId,
      userId,
      new Date().toISOString(),
      fileId,
      rootMessage ? rootMessage : ""
    );
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh:", err);
    bot.sendMessage(
      chatId,
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
    );
  }
}

module.exports = handleImageMessage;
