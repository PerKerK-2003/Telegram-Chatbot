const { getFAQs, insertFAQ } = require("../services/faqs_service");
const {
  askGeminiWithImage,
  extractQAFromTextWithRetry,
} = require("../utils/gemini");
const ConversationHistory = require("../utils/conversation");
const {
  saveTextEmbedding,
  findSimilarEmbeddings,
} = require("../embedding/textEmbedding");
const { insertSupportMessageToSheet } = require("../sheet/googleSheet");

const conversationHistory = new ConversationHistory();

async function handleImageMessage(bot, msg, chatId) {
  const photoArray = msg.photo;
  const highestQualityPhoto = photoArray[photoArray.length - 1];
  const fileId = highestQualityPhoto.file_id;
  const userId = msg.from.id;

  try {
    const fileLink = await bot.getFileLink(fileId);
    bot.sendMessage(
      chatId,
      "C·∫£m ∆°n! T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ·∫£nh c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω..."
    );

    const prompt = msg.caption || "ƒê√¢y l√† h√¨nh ·∫£nh li√™n quan";

    console.log("Analyzing image message intent for:", prompt);
    const userIntent = await extractQAFromTextWithRetry(prompt);
    console.log("Image message intent detected:", userIntent);

    if (userIntent.type === "teach") {
      console.log(
        "User is teaching bot with image:",
        userIntent.question,
        "->",
        userIntent.answer
      );

      await insertFAQ(
        userIntent.question,
        userIntent.answer,
        msg.message_id,
        msg.chat.id,
        msg.from.id,
        fileId
      );

      await saveTextEmbedding(
        userId,
        chatId,
        userIntent.question,
        userIntent.answer
      );

      await insertSupportMessageToSheet(
        userIntent.question,
        userIntent.answer,
        msg.message_id,
        msg.chat.id,
        msg.from.id,
        new Date().toISOString(),
        fileId
      );

      conversationHistory.addMessage(userId, chatId, prompt, userIntent.answer);

      return bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ h·ªçc ƒë∆∞·ª£c th√¥ng tin m·ªõi t·ª´ h√¨nh ·∫£nh!\n\nüß† **C√¢u h·ªèi:** ${userIntent.question}\nüí° **Tr·∫£ l·ªùi:** ${userIntent.answer}\nüñºÔ∏è **K√®m theo:** H√¨nh ·∫£nh minh h·ªça\n\nT√¥i s·∫Ω nh·ªõ ƒëi·ªÅu n√†y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi t∆∞∆°ng t·ª± sau.`
      );
    }

    const followUpContext = conversationHistory.getFollowUpContext(
      userId,
      chatId
    );
    const conversationContext = conversationHistory.formatForGemini(
      userId,
      chatId
    );

    let relevantFAQs;
    let searchQuery = prompt;

    if (followUpContext && followUpContext.isFollowUp) {
      const contextualQuery = `${followUpContext.lastTopic} ${prompt} h√¨nh ·∫£nh`;
      relevantFAQs = await findSimilarEmbeddings(contextualQuery, 3);
      const currentRelevantFAQs = await findSimilarEmbeddings(prompt, 2);
      const combinedFAQs = [...relevantFAQs, ...currentRelevantFAQs];
      const uniqueFAQs = combinedFAQs.filter(
        (faq, index, self) =>
          index === self.findIndex((f) => f.question === faq.question)
      );
      relevantFAQs = uniqueFAQs.slice(0, 3);
      searchQuery = contextualQuery;
    } else {
      relevantFAQs = await findSimilarEmbeddings(prompt, 3);
    }

    console.log("Image - Relevant FAQs found:", relevantFAQs.length);
    console.log("Image - Follow-up context:", followUpContext);

    let contextPrompt = `D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y n·∫øu c√≥: 
    ${conversationContext}`;

    if (followUpContext && followUpContext.isFollowUp) {
      contextPrompt += `
[QUAN TR·ªåNG] ƒê√¢y l√† h√¨nh ·∫£nh ti·∫øp theo s·ªë ${followUpContext.followUpCount} li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ "${followUpContext.lastTopic}".
${followUpContext.contextualPrompt}

H∆∞·ªõng d·∫´n ph√¢n t√≠ch h√¨nh ·∫£nh:
- K·∫øt n·ªëi v·ªõi c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥ v·ªÅ "${followUpContext.lastTopic}"
- Ph√¢n t√≠ch h√¨nh ·∫£nh trong ng·ªØ c·∫£nh c·ªßa cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc
- Cung c·∫•p th√¥ng tin b·ªï sung ho·∫∑c chi ti·∫øt h∆°n d·ª±a tr√™n h√¨nh ·∫£nh
- N·∫øu h√¨nh ·∫£nh kh√¥ng r√µ r√†ng, h√£y tham kh·∫£o ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ ƒë·ªÉ hi·ªÉu √Ω ƒë·ªãnh
- Tr√°nh l·∫∑p l·∫°i th√¥ng tin ƒë√£ cung c·∫•p tr∆∞·ªõc ƒë√≥
`;
    } else {
      contextPrompt += `
H∆∞·ªõng d·∫´n ph√¢n t√≠ch h√¨nh ·∫£nh:
- Ph√¢n t√≠ch chi ti·∫øt n·ªôi dung trong h√¨nh ·∫£nh
- Tr·∫£ l·ªùi d·ª±a tr√™n nh·ªØng g√¨ b·∫°n th·∫•y trong h√¨nh ·∫£nh
- N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi
- Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt
- S·ª≠ d·ª•ng l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh t·ªët h∆°n
`;
    }

    contextPrompt += `
C√¢u h·ªèi/M√¥ t·∫£: ${prompt}
H√£y tr·∫£ l·ªùi c√¢u h·ªèi n√†y m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch nh·∫•t c√≥ th·ªÉ. N·∫øu kh√¥ng c√≥ th√¥ng tin h·ªó tr·ª£ n√†o, h√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung c·ªßa b·∫°n ƒë·ªÉ tr·∫£ l·ªùi d·ª±a tr√™n h√¨nh ·∫£nh.`;

    console.log("Image Context Prompt:", contextPrompt);

    if (relevantFAQs.length > 0) {
      const mostRelevantFAQ = relevantFAQs[0];
      const similarityThreshold = followUpContext?.isFollowUp ? 0.94 : 0.97;

      if (mostRelevantFAQ.score > similarityThreshold) {
        console.log(
          "Using direct FAQ match for image with score:",
          mostRelevantFAQ.score
        );

        let response = mostRelevantFAQ.answer;
        if (followUpContext?.isFollowUp) {
          response = `üñºÔ∏è [Ti·∫øp theo h√¨nh ·∫£nh tr∆∞·ªõc] ${response}`;
        }

        await insertFAQ(
          prompt,
          response,
          msg.message_id,
          msg.chat.id,
          msg.from.id,
          fileId
        );
        await insertSupportMessageToSheet(
          prompt,
          response,
          msg.message_id,
          msg.chat.id,
          msg.from.id,
          new Date().toISOString(),
          fileId
        );

        conversationHistory.addMessage(userId, chatId, prompt, response);

        return bot.sendMessage(chatId, response, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
                {
                  text: "üëé Kh√¥ng h·ªØu √≠ch",
                  callback_data: "feedback_not_helpful",
                },
              ],
            ],
          },
        });
      }
    }

    console.log("Generating AI response for image...");
    const geminiResponse = await askGeminiWithImage(fileLink, contextPrompt);

    await saveTextEmbedding(userId, chatId, prompt, geminiResponse);

    let finalResponse = geminiResponse;
    if (followUpContext?.isFollowUp) {
      finalResponse = `üñºÔ∏èüí¨ ${geminiResponse}`;
    }

    conversationHistory.addMessage(userId, chatId, prompt, geminiResponse);

    await insertFAQ(
      prompt,
      geminiResponse,
      msg.message_id,
      msg.chat.id,
      msg.from.id,
      fileId
    );
    await insertSupportMessageToSheet(
      prompt,
      geminiResponse,
      msg.message_id,
      msg.chat.id,
      msg.from.id,
      new Date().toISOString(),
      fileId
    );

    bot.sendMessage(chatId, finalResponse, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üëç Gi√∫p √≠ch", callback_data: "feedback_helpful" },
            { text: "üëé Kh√¥ng h·ªØu √≠ch", callback_data: "feedback_not_helpful" },
          ],
        ],
      },
    });
  } catch (err) {
    console.error("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh:", err);
    bot.sendMessage(
      chatId,
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
    );
  }
}

module.exports = handleImageMessage;
